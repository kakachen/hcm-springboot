<ui:composition xmlns="http://www.w3.org/1999/xhtml"
				xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
				xmlns:f="http://xmlns.jcp.org/jsf/core"
				xmlns:fn="http://java.sun.com/jsp/jstl/functions"
				xmlns:h="http://xmlns.jcp.org/jsf/html"
				xmlns:p="http://primefaces.org/ui"
				xmlns:pe="http://primefaces.org/ui/extensions"
				xmlns:of="http://omnifaces.org/functions"
				xmlns:lcf="http://litecode.com.br/functions">

	<p:growl id="growl" widgetVar="growl" showDetail="true" life="15000" escape="false" />

	<div class="content-wrapper">
		<h:form id="form">
			<p:panelGrid columns="7" layout="grid" style="margin-bottom: 15px;">
				<h:panelGroup style="white-space: nowrap;">
					<p:commandButton icon="fa fa-chevron-left" actionListener="#{sessionController.previousSessionDate()}" process="@this" update="chambersGrid, sessionDate" />
					<p:calendar id="sessionDate" value="#{sessionController.sessionInput.sessionDate}" pattern="dd/MM/yyyy" showOn="button" readonlyInput="true" size="15" beforeShowDay="sessionDates" converter="localDateTimeConverter">
						<p:ajax event="dateSelect" process="@this" update="chambersGrid"/>
					</p:calendar>
					<p:commandButton icon="fa fa-chevron-right" actionListener="#{sessionController.nextSessionDate()}" process="@this" update="chambersGrid, sessionDate" />
				</h:panelGroup>

				<p:selectOneMenu id="sessionChamber" value="#{sessionController.sessionInput.chamber}" converter="omnifaces.SelectItemsConverter" styleClass="hidden-xs">
					<f:selectItems value="#{chamberController.chambers}" var="chamber" itemValue="#{chamber}" itemLabel="#{chamber.name}"/>
				</p:selectOneMenu>

				<h:panelGroup styleClass="hidden-xs">
					<pe:timePicker id="sessionTime" label="#{msg['label.time']}" widgetVar="sessionTime" value="#{sessionController.sessionInput.sessionTime}" mode="spinner" startHours="6" endHours="22" showOn="focus" intervalMinutes="15" required="true">
						<f:converter converterId="localDateTimeConverter" />
						<f:attribute name="pattern" value="HH:mm" />
					</pe:timePicker>
				</h:panelGroup>

				<p:selectCheckboxMenu id="sessionPatients" label="#{msg['label.patients']}" value="#{sessionController.sessionInput.patients}" filter="true" filterMatchMode="startsWith" converter="omnifaces.SelectItemsConverter" required="true"  styleClass="hidden-xs">
					<f:selectItems value="#{patientController.patients}" var="patient" itemValue="#{patient}" itemLabel="#{patient.name}"/>
				</p:selectCheckboxMenu>

				<p:commandButton value="#{msg['button.add']}" actionListener="#{sessionController.addSession()}" process="@this, sessionDate, sessionChamber, sessionTime, sessionPatients" update="chambersGrid, messages, sessionPatients" validateClient="true" styleClass="btn-primary hidden-xs">
					<p:resetInput target="@form" />
				</p:commandButton>

				<p:commandButton icon="fa fa-clone" value="#{msg['button.duplicateSessions']}" process="@this" actionListener="#{sessionController.initializeDuplicateSessionDates()}" update=":duplicateSessionsForm" oncomplete="PF('duplicateSessionDialog').show()" styleClass="btn-primary hidden-xs hidden-sm" />

				<p:messages id="messages"/>
			</p:panelGrid>

			<p:dataGrid id="chambersGrid" var="chamber" value="#{chamberController.chambers}" columns="1" layout="grid">
				<p:dataTable id="periodsTable" value="#{sessionController.getSessions(chamber.chamberId, sessionController.sessionInput.sessionDate)}" var="chamberSession" rows="9" emptyMessage="#{msg['message.noSessionsFound']}" sortBy="#{chamberSession.timePeriod}">
					<f:facet name="header">
						#{chamber.name}
						<div style="float: right;"><i class="fa fa-exclamation-circle"></i> #{msg['message.absentPatient']}</div>
					</f:facet>

					<p:headerRow>
						<p:column colspan="12">
							<h:outputText value="#{lcf:enum(chamberSession.timePeriod)}"/>
						</p:column>
					</p:headerRow>

					<p:column headerText="#{msg['label.id']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg" style="width: 3.0em;">
						<h:outputText value="#{chamberSession.sessionId}"/>
					</p:column>

					<p:column headerText="#{msg['label.patients']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg large-column hidden-xs" style="vertical-align: top;">
						<ui:repeat value="#{chamberSession.patientSessions.toArray()}" var="patientSession">
							<div class="long-text text-left">
								<h:outputText
										styleClass="patient-#{patientSession.patientSessionId}"
										value="#{patientSession.patient.name}"
										style="#{patientSession.absent ? 'color: #b14538' : chamberSession.running ? 'color: #007d18' : ''}" />
								<p:tooltip for="@(.patient-#{patientSession.patientSessionId})" value="#{patientSession.patient.recordInfo}" position="right"/>
								<h:panelGroup rendered="#{patientSession.absent}"> <i class="fa fa-exclamation-circle" style="font-size: 9px"></i> </h:panelGroup>
							</div>
						</ui:repeat>
					</p:column>

					<p:column headerText="#{msg['label.healthInsurance']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg medium-column hidden-sm hidden-xs" style="vertical-align: top">
						<ui:repeat value="#{chamberSession.patientSessions.toArray()}" var="patientSession">
							<div class="long-text text-left">
								<h:outputText value="#{patientSession.patient.healthInsurance}" title="#{patientSession.patient.healthInsurance}" />
							</div>
						</ui:repeat>
					</p:column>

					<p:column headerText="#{msg['label.numberOfSessions']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg small-column hidden-xs" style="vertical-align: top; white-space: nowrap">
						<ui:repeat value="#{patientController.getPatientStats(chamberSession.sessionId, sessionController.sessionInput.sessionDate).toArray()}" var="patientStats">
							<div>
								<h:outputText value="#{patientStats.completedSessions}" />
							</div>
						</ui:repeat>
					</p:column>

					<p:column headerText="#{msg['label.capacity']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg text-left hidden-sm hidden-xs" style="width: 8.5em;">
						<ui:repeat value="#{sessionController.getChamberPayload(chamberSession)}" var="payloadStatus">
							<div class="col-md-4" style="padding-left: 2px;">
								<span class="fa-stack fa-2x" style="font-size: 12px;">
									<i class="fa fa-circle fa-stack-2x" style="#{payloadStatus eq 'AVAILABLE' ? 'color: #d3d3d3' : payloadStatus eq 'OCCUPIED' ? 'color: #466b8e' : 'color: #b14538'}"></i>
									<h:panelGroup styleClass="fa fa-circle-o-notch fa-spin fa-fw fa-stack-1x" style="color: #1ee84a; top: 6px;" rendered="#{chamberSession.running and payloadStatus eq 'OCCUPIED' }"/>
								</span>
							</div>
						</ui:repeat>
					</p:column>

					<p:column headerText="#{msg['label.time']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg small-column hidden-xs">
						<h:outputText value="#{chamberSession.scheduledTime}">
							<f:converter converterId="localDateTimeConverter" />
							<f:attribute name="pattern" value="HH:mm:ss" />
						</h:outputText>
					</p:column>

					<p:column headerText="#{msg['label.startTime']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg small-column">
						<h:outputText value="#{chamberSession.startTime}" style="color: #007d18;">
							<f:converter converterId="localDateTimeConverter" />
							<f:attribute name="pattern" value="HH:mm:ss" />
						</h:outputText>
					</p:column>

					<p:column headerText="#{msg['label.nextEvent']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg medium-column hidden-sm hidden-xs">
						<div>
							<h:outputText value="#{lcf:enum(chamberSession.nextChamberEvent.eventType)}" rendered="#{chamberSession.nextChamberEvent ne null}" />
						</div>
						<div>
						<h:outputText value="#{chamberSession.nextChamberEventTime}" rendered="#{chamberSession.nextChamberEvent ne null}">
							<f:converter converterId="localDateTimeConverter" />
							<f:attribute name="pattern" value="HH:mm:ss" />
						</h:outputText>
						</div>
					</p:column>

					<p:column headerText="#{msg['label.endTime']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg small-column">
						<h:outputText value="#{chamberSession.endTime}" style="color: #b14538;">
							<f:converter converterId="localDateTimeConverter" />
							<f:attribute name="pattern" value="HH:mm:ss" />
						</h:outputText>
					</p:column>

					<p:column headerText="#{msg['label.status']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg medium-column">
						<h:outputText value="#{lcf:enum(chamberSession.status)}" styleClass="#{lcf:enumStyle(chamberSession.status)}"/>
					</p:column>

					<p:column headerText="#{msg['label.progress']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg medium-column">
						<div class="timer-progress-cell">
							<div id="currentTime-#{chamberSession.sessionId}">
								<h:outputText value="#{sessionTracker.getSession(chamberSession.sessionId).timeRemaining}" rendered="#{chamberSession.running}"/>
								<h:outputText value="00:00:00" rendered="#{not chamberSession.running}"/>
							</div>
							<div>
								<p:progressBar widgetVar="progress-#{chamberSession.sessionId}" labelTemplate="{value}%" styleClass="#{fn:toLowerCase(chamberSession.status)}" rendered="#{chamberSession.status ne 'FINISHED'}"/>
								<p:progressBar value="100" displayOnly="true" labelTemplate="100%" styleClass="#{fn:toLowerCase(chamberSession.status)}" rendered="#{chamberSession.status eq 'FINISHED'}"/>
							</div>
						</div>
					</p:column>

					<p:column headerText="#{msg['label.action']}" styleClass="#{lcf:enumStyle(chamberSession.status)}-bg medium-column session-action hidden-xs">
						<div class="row">
							<div class="col-sm-4 col-md-2">
								<p:commandButton title="#{msg['button.startSession']}" icon="fa fa-play" actionListener="#{sessionController.startSession(chamberSession)}" process=":form:chambersGrid" update="@form" global="false" disabled="#{chamberSession.status ne 'CREATED'}"/>
							</div>
							<div class="col-sm-4 col-md-2">
								<p:commandButton title="#{msg['button.edit']}" icon="fa fa-pencil" actionListener="#{sessionController.sessionInput.reset()}" oncomplete="PF('sessionDialog').show()" process=":form:chambersGrid" update=":editSessionForm" global="false">
									<f:setPropertyActionListener value="#{chamberSession}" target="#{sessionController.sessionInput.session}" />
								</p:commandButton>
							</div>
							<div class="col-sm-4 col-md-2">
								<p:commandButton title="#{msg['button.reset']}" icon="fa fa-stop" actionListener="#{sessionController.resetSession(chamberSession)}" process=":form:chambersGrid" update="@form" disabled="#{chamberSession.status eq 'CREATED'}"/>
							</div>
							<div class="col-sm-4 col-md-2">
								<p:commandButton title="#{msg['button.finish']}" icon="fa fa-fast-forward" actionListener="#{sessionController.finishSession(chamberSession)}" process=":form:chambersGrid" update="@form" disabled="#{chamberSession.status eq 'FINISHED'}" styleClass="hidden-sm" />
							</div>
							<div class="col-sm-4 col-md-2">
								<p:commandButton title="#{msg['button.delete']}" icon="fa fa-trash" actionListener="#{sessionController.sessionInput.setSession(chamberSession)}" onclick="PF('confirmDeleteSessionDialog').show()" process=":form:chambersGrid" global="false" disabled="#{chamberSession.status ne 'CREATED' and chamberSession.status ne 'FINISHED'}" rendered="#{loginController.hasAdminRights()}" styleClass="hidden-sm" />
							</div>
						</div>
					</p:column>
				</p:dataTable>
				<h:outputScript>if (typeof resize === "function") resize();</h:outputScript>
			</p:dataGrid>
		</h:form>
	</div>

	<h:form id="editSessionForm">
		<p:dialog header="#{msg['label.session']} #{sessionController.sessionInput.session.sessionId}" widgetVar="sessionDialog" width="50%" resizable="false" showEffect="fade" hideEffect="fade" modal="true" dynamic="true">
			<p:messages id="sessionMessages" autoUpdate="true" />
			<div class="row ui-fluid" style="padding-bottom: 10px;">
				<div class="col-md-3 col-sm-6">
					<p:selectCheckboxMenu id="newSessionPatients" label="#{msg['label.patients']}" value="#{sessionController.sessionInput.patients}" filter="true" filterMatchMode="startsWith" converter="omnifaces.SelectItemsConverter" required="true" style="width: 160px" panelStyle="width: 250px">
						<f:selectItems value="#{patientController.getAvailabePatientsForSession(sessionController.sessionInput.session.sessionId)}" var="patient" itemValue="#{patient}" itemLabel="#{patient.name}"/>
					</p:selectCheckboxMenu>
				</div>
				<div class="col-md-3 col-sm-6 pull-right">
					<p:commandButton value="#{msg['label.addPatients']}" actionListener="#{sessionController.addPatientsToSession(sessionController.sessionInput.session)}" process="@this, newSessionPatients" update=":form:chambersGrid, sessionPatientsTable, sessionMessages, newSessionPatients" styleClass="btn-primary" />
				</div>
			</div>
			<p:dataTable id="sessionPatientsTable" styleClass="dialog-table" var="sessionPatient" value="#{sessionController.sessionInput.session.patientSessions}" emptyMessage="#{msg['message.noData']}">
				<p:column headerText="#{msg['label.id']}" width="50">
					<h:outputText value="#{sessionPatient.patient.patientId}" />
				</p:column>
				<p:column headerText="#{msg['label.name']}" styleClass="text-left">
					<h:outputText value="#{sessionPatient.patient.name}" />
				</p:column>
				<p:column headerText="#{msg['label.status']}" width="120">
					<ui:param name="status" value="#{msg[sessionPatient.absent ? 'label.patientSessionAbsent' : 'label.patientSessionPresent']}" />
					<h:outputText value="#{status}" styleClass="#{sessionPatient.absent ? 'patient-absent' : 'patient-present'}" />
				</p:column>
				<p:column headerText="#{msg['label.action']}" width="100">
					<p:commandButton process="@this" update=":form:chambersGrid, :editSessionForm:sessionPatientsTable" actionListener="#{sessionController.setPatientSessionStatus(sessionPatient, false)}" icon="fa fa-calendar-check-o" title="#{msg['button.active']}" rendered="#{sessionPatient.absent}" />
					<p:commandButton process="@this" update=":form:chambersGrid, :editSessionForm:sessionPatientsTable" actionListener="#{sessionController.setPatientSessionStatus(sessionPatient, true)}" icon="fa fa-calendar-times-o" title="#{msg['button.absent']}" rendered="#{not sessionPatient.absent}" />
					<p:commandButton process="@this" update=":form:chambersGrid, :editSessionForm:sessionPatientsTable, :editSessionForm:newSessionPatients" actionListener="#{sessionController.removePatientFromSession(sessionPatient)}" icon="fa fa-trash" title="#{msg['button.delete']}" />
				</p:column>
			</p:dataTable>
		</p:dialog>
	</h:form>

	<h:form>
		<p:confirmDialog message="#{msg['confirmation.deleteSession']}" header="#{msg['title.deleteSession']}" severity="alert" widgetVar="confirmDeleteSessionDialog">
			<p:commandButton value="#{msg['button.cancel']}" onclick="PF('confirmDeleteSessionDialog').hide()" styleClass="btn-primary pull-right"/>
			<p:commandButton value="#{msg['button.delete']}" process="@this" update=":form:chambersGrid" oncomplete="PF('confirmDeleteSessionDialog').hide()" actionListener="#{sessionController.deleteSession(sessionController.sessionInput.session)}" styleClass="btn-danger pull-right"/>
		</p:confirmDialog>
	</h:form>

	<h:form id="duplicateSessionsForm">
		<p:dialog header="#{msg['title.duplicateSessions']}" widgetVar="duplicateSessionDialog" resizable="false" showEffect="fade" hideEffect="fade" modal="true">
			<p:panelGrid columns="5" layout="grid">
				<p:outputLabel value="#{msg['label.from']}"/>
				<p:calendar id="previousSessionsDate" value="#{sessionController.fromSessionsDate}" required="true" pattern="dd/MM/yyyy" showOn="button" readonlyInput="true" size="15" converter="localDateTimeConverter" beforeShowDay="sessionDates" />
				<p:outputLabel value="#{msg['label.to']}"/>
				<p:calendar id="newSessionsDate" value="#{sessionController.toSessionsDate}" required="true" pattern="dd/MM/yyyy" showOn="button" readonlyInput="true" size="15" converter="localDateTimeConverter" beforeShowDay="sessionDates" />
				<p:commandButton value="#{msg['button.duplicate']}" process="@this, previousSessionsDate, newSessionsDate" update=":form:chambersGrid" actionListener="#{sessionController.duplicateSessions()}" oncomplete="PF('duplicateSessionDialog').hide()" styleClass="btn-primary"/>
			</p:panelGrid>
		</p:dialog>
	</h:form>

	<h:form>
		<p:remoteCommand name="updateSessions" process="@this" update=":form:chambersGrid" global="false" />
		<p:remoteCommand name="refreshSessions" actionListener="#{sessionController.invalidateSessionCache()}" process="@this" update=":form:chambersGrid :editSessionForm" global="false" />
	</h:form>

	<script type="text/javascript">
		var loggedUser;

		function register(registrations) {
			var socket = SockJS('/push');
			var stompClient = Stomp.over(socket);
			stompClient.debug = null;

			stompClient.connect({}, function(frame) {
				loggedUser = frame.headers['user-name'];
				registrations.forEach(function (registration) {
					stompClient.subscribe(registration.route, registration.callback);
					console.log("Registered", registration.route);
				});
			});

			socket.onclose = function() {
				refreshSessions();
				stompClient.disconnect();
			}
		}

		$().ready(function() {
			register([
				{
					route: '/topic/progress', callback: function (data) {
						var sessionProgress = JSON.parse(data.body);
						updateTimer(sessionProgress);
					}
				},
				{
					route: '/topic/notify', callback: function (data) {
						handleMessage(JSON.parse(data.body));
						refreshSessions();
					}
				},
				{
					route: '/topic/refresh', callback: function (data) {
						if (data.headers['user-name'] != loggedUser) {
							refreshSessions();
						}
					}
				}
			]);

			resize();

			mixpanel.track('Sessions page');
		});

		$(window).resize(function() {
			resize();
		});

		function handleMessage(notificationMessage) {
			var facesMessage = {
				summary: notificationMessage.messageSummary,
				detail: notificationMessage.messageDetail,
				severity: notificationMessage.eventType
			};

			PF('growl').show([facesMessage]);
			playSound(notificationMessage.eventType);
		}

		function playSound(eventType) {
			var audio = document.getElementById('audio');
			audio.src = '#{request.contextPath}/javax.faces.resource/sounds/' + eventType + '.mp3';
			setTimeout(function () {
				audio.play();
			}, 150);
		}

		function updateTimer(session) {
			$('#currentTime-' + session.sessionId).text(session.timeRemaining);
			progressStep(session);
		}

		function progressStep(session) {
			var widget = PF('progress-' + session.sessionId);
			if (widget &amp;&amp; session.currentProgress > 0) {
				widget.setValue(session.currentProgress);
			}
		}

//		function handleAlarm(alarm) {
//			var facesMessage = {
//				summary: alarm.name,
//				detail: alarm.message,
//				severity: "info"
//			};
//
//			PF('growl').show([facesMessage]);
//			playSound(alarm.notificationSound);
//		}

		var dates = new Array(#{sessionController.scheduledSessionDates});

		function sessionDates(date) {
			var isoDate = date.getFullYear() + '-' + (date.getMonth() &lt; 9 ? '0' : '') + (date.getMonth() + 1) + '-' + (date.getDate() &lt; 10 ? '0' : '') + date.getDate();
			var styleClass = dates.indexOf(isoDate) != -1 ? 'session-day' : '';
			return [ true,  styleClass]
		}

		function resize() {
			var colspan = 12 - ($('.ui-datatable-tablewrapper th[scope="col"]:hidden').length / 2);
			$('.ui-rowgroup-header td, .ui-datatable-empty-message td').attr('colspan', colspan);
		}
	</script>
</ui:composition>