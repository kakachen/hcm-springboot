/* Mixins */

@import "animate.min.css?ln=css";

.shadow(@base-color, @alpha: 60%, @width: 8px) {
	border-color: fade(@base-color, @alpha + 20%);
	outline: 0;
	outline: thin dotted \9;
	-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0), 0 0 @width fade(@base-color, @alpha);
	-moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0), 0 0 @width fade(@base-color, @alpha);
	box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0), 0 0 @width fade(@base-color, @alpha);
}

.shadow-bottom(@h-shadow: 2px, @v-shadow: 2px, @blur: 2px, @base-color: @darkGreyThemeColor) {
	-webkit-box-shadow: @h-shadow @v-shadow @blur -@blur, @base-color;
	-moz-box-shadow: @h-shadow @v-shadow @blur -@blur @base-color;
	box-shadow: @h-shadow @v-shadow @blur -@blur @base-color;
}

.transition-duration(@duration: 0.2s) {
	-moz-transition-duration: @duration;
	-webkit-transition-duration: @duration;
	-o-transition-duration: @duration;
	transition-duration: @duration;
}

.transition(@property: width, @duration: 1s) {
	-webkit-transition: @property @duration;
	-moz-transition: @property @duration;
	-o-transition: @property @duration;
	transition: @property @duration;
}

.rounded(@radius: 2px) {
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}

.rounded(@topLeft: 2px, @topRight: 2px, @bottomLeft: 2px, @bottomRight: 2px) {
	-moz-border-radius: @topLeft @topRight @bottomRight @bottomLeft;
	-webkit-border-radius: @topLeft @topRight @bottomRight @bottomLeft;
	border-radius: @topLeft @topRight @bottomRight @bottomLeft;
}

.animate(@delay: 0s, @duration: .8s, @timingFunction: ease) {
	-webkit-animation-duration:  @duration;
	-webkit-animation-delay: @delay;
	-webkit-animation-timing-function: @timingFunction;
	-webkit-animation-fill-mode: both;
	-moz-animation-duration:  @duration;
	-moz-animation-delay: @delay;
	-moz-animation-timing-function: @timingFunction;
	-moz-animation-fill-mode: both;
	-ms-animation-duration:  @duration;
	-ms-animation-delay: @delay;
	-ms-animation-timing-function: @timingFunction;
	-ms-animation-fill-mode: both;
	animation-duration:  @duration;
	animation-delay: @delay;
	animation-timing-function: @timingFunction;
	animation-fill-mode: both;
}

.animation-delays(10);

.animation-delays(@maxDelay, @i: 0, @delay: 0s) when (@i =< @maxDelay) {
	.animate-@{i} {
    	.animate(@delay);
  	}
  	.animation-delays(@maxDelay, @i + 1, @delay + 0.2s);
}

.rotate(@degrees: -90deg) {
	transform: rotate(@degrees);
	-webkit-transform: rotate(@degrees); 
	-ms-transform:rotate(@degrees);
}

.for(@array) when (default()) {
	.for-impl(length(@array))
}

.for-impl(@i) when (@i > 1) {
	.for-impl((@i - 1))
}

.for-impl(@i) when (@i > 0) {
	.-each(extract(@array, @i))
}